modelo de redes para imagenes


_____________________________________________________________

- Conv2D: Esta capa aplica una convolución 2D a la entrada. Esta capa se usa para extraer características de la imagen.
- MaxPooling2D: Esta capa realiza una operación de agrupamiento máximo en la entrada. Esto reduce el tamaño de la imagen y ayuda a reducir el sobreajuste.
- Activation: Esta capa aplica una función de activación a la entrada. Esto ayuda a regular el modelo para que no se sobreajuste.
- Dropout: Esta capa desactiva aleatoriamente un porcentaje de neuronas para evitar el sobreajuste.
- Flatten: Esta capa aplana la entrada en un vector unidimensional.
- Dense: Esta capa es una capa totalmente conectada que se usa para realizar la clasificación.
- Loss: Esta es la función de pérdida que se usa para evaluar el rendimiento del modelo.
- Optimizer: Esta es la función de optimización que se usa para entrenar el modelo.
- Metrics: Esta es la métrica que se usa para evaluar el rendimiento del modelo.


_____________________________________________________________

# Importar las bibliotecas necesarias
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D
from keras.layers import Activation, Dropout, Flatten, Dense

# Definir el tamaño de la imagen
img_width, img_height = 150, 150

# Crear el modelo de red neuronal convolucional
model = Sequential()
model.add(Conv2D(32, (3, 3), input_shape=(img_width, img_height, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())
model.add(Dense(64))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(1))
model.add(Activation('sigmoid'))


# Compilar el modelo
model.compile(loss='binary_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])

# Entrenar el modelo con los datos de entrenamiento
model.fit(X_train, y_train,
          batch_size=32,
          epochs=10,
          validation_data=(X_test, y_test))

# Evaluar el modelo con los datos de prueba
score = model.evaluate(X_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])